"""
Problem
For DNA strings s1 and s2 having the same length,
their transition/transversion ratio R(s1,s2)
is the ratio of the total number of transitions to the total number of transversions,
where symbol substitutions are inferred from mismatched
corresponding symbols as when calculating Hamming distance
(see “Counting Point Mutations”).

Given: Two DNA strings s1 and s2 of equal length (at most 1 kbp).

Return: The transition/transversion ratio R(s1,s2).
"""
#%%

import os
from itertools import groupby

def fasta_parser(filename):
    with open(filename) as handle:
        faiter = (x[1] for x in groupby(handle, lambda line: line[0] == ">"))

        for header in faiter:
            headerstr = header.__next__()[1:].strip()
            sequence = "".join(s.strip() for s in faiter.__next__())
            yield headerstr, sequence

def get_ratio(filename):
    #    A<->G ,  C<->T   == TRANSITIONS
    #    A<->C ,  G<->T   == TRANSVERSIONS
    sequences = [sequence for _, sequence in fasta_parser(problem_path + '/'+filename)]

    ag=['A','G']
    ct=['C','T']
    transitions=0
    transversions=0
    for base1,base2 in zip(sequences[0],sequences[1]):
        if base1 !=base2:
            if base1 in ag and base2 in ag:
                transitions+=1
            elif base1 in ct and base2 in ct:
                transitions+=1
            else:
                transversions +=1

    return transitions/transversions


if __name__ == '__main__':
    problem_path = os.path.join(os.getcwd())
    print(f'{get_ratio("rosalind_tran.txt"):.11f}')